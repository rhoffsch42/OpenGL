update ClassDiagram.png
---- HUMANGL WISHES FOR SimpleGL	-------------------------------------------------------
rotation:
	-	use rad for calculation by default, have a variable for degree
			if user want to use func with degree, he should have to use ROT_DEGREE flag
	OR-	use only rad, user MUST convert his degree to radian
---- other			-------------------------------------------------------
texture: create empty Texture? for framebuffer (= Texture::genTexture()
texture: handle 32bits bmp too
/!\ function args: use const ref when necesary, to avoid copy cons
	example with Vector3:
	{
		Math::Vector3	v1(1,2,3);
		Math::Vector3	v2(2,2,2);
		v1.sub(v2);
		/*
			functions called:
				Math::Vector3::Vector3(float x, float y, float z)
				Math::Vector3::Vector3(float x, float y, float z)
		BAD		Math::Vector3::Vector3(const Math::Vector3 &)
		BAD		Math::Vector3 &Math::Vector3::operator=(const Math::Vector3 &)
				void Math::Vector3::sub(Math::Vector3)
		*/
	}
	-> check all other classes too...
documented function, ex: Math::Vector3::rotateAround
float	(*Vector3::operation)(float,float);
	inline?	add/sub/etc
	compare execution speed, binary size
check if destructor of mother class is called when child is destroyed -> virtual destructor
similar constructors: make an init func ? with all common tasks
check derived constructor: call to base constructor ?
check the copy constructor with derived class: good call to base copy constructor?
polymorphisme: check for operator overloading with inheritence, and destructors
---- memory/leaks	-------------------------------------------------------
delete data opengl:
	Skybox
	Blueprint and derived
	Program and derived
	Texture
---- text/file formating	-------------------------------------------------------
end of line: CRLF or LF
#include "simplegl.h" in class.cpp is bad? the class.hpp have to be self-sufficient
*.cpp: #include "SimpleGL.h" necessary? only need <iostream> ?
pointer/ref declaration: Class* ptr || Class *ptr
dynamic_cast	check if it failed ?
const_cast	check if it is used everywhere, no: (Type)var
maj in file name, OS dependant
void on all accessors ? https://stackoverflow.com/questions/20617067/returning-function-pointer-type
constructor copy, const T& src (et pas const T& randomName)
references: type& varname;
class X { //brace here or next line
if (condition)//bad but tolerated, braces should englobe code
	return ;
	[...]
public variables without underscore: _varname;
regroup class and inherited class in the same file ? not everything would need that
---- Main features	-------------------------------------------------------
Obj3dBP::dimensions : are they rescaled ?
Object::_parent : setter/getter useless? make it public. Check other members on ALL classes too.
confusing: same function names that do different things:
	Properties::rotate() :			add a rot to the current rot of the object
	Vector3::rotate() :				apply a rotation on the 3 coordinates
	Properties::rotateAround() :	rotate the object around a point, modifying its pos and rotation
	Vector3::rotateAround() :		rotate the vector around a point, modifying the 3 coordinates
use default value to avoir multiple overloads of member funcs (especially in Math::)
make a CounterManaged to destroy easely all instances, or do whatever ( Texture : public CounterManaged  ->  Texture::DestroyAll)
change all exit() by throw exception that could be catched by user
Nath::Matrix4::scaleMatrix probablement fausse, check les ut aussi
Math::Vector3	make a "linear" mult? Vec3(2,2,2) * Vec3(2,3,4) = Vec3(4,6,8) //or change operator, see properties.hpp
Math::Vector3	operator surcharges:
					+- Vector3
					+-*/ float, %?
cam.setParent() *finish Behavior and other fix before continuing this
	working but movement are from worldSpace and not localSpace (need unlock mvt/orientation)
class Object (cf obj3d.hpp, skybox.hpp, program.hpp and derived)
	class Program and derived: see SkyboxPG.hpp
	class skybox : public Object.
		+see SkyboxPG.hpp
overload operator << for all classes to get a nice printing. overkill
	at least replace X.printData (math.hpp)

quaternions: https://www.youtube.com/watch?v=d4EgbgTm0Bg
---- GUI			-------------------------------------------------------
	Qt
---- BUGS			-------------------------------------------------------
glfwSetInputMode(this->_window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);
	/!\ not working since old motion system is removed? memory bug ?

list of ref: https://stackoverflow.com/questions/7707842/stl-containers-with-reference-to-objects

---- TIPS FOR LATER USE	-------------------------------------------------------
http://cpp.sh/8wyol
// Example program
#include <iostream>
#include <string>
#include <functional>
#include <list>
using namespace std;

class Object {
public:
	Object() { this->n = 0; }
	~Object() {}
	int n;
};

ostream& operator<<(ostream& os, const Object& src)  
{  
    os << src.n << endl;  
    return os;
}  

int main()
{
  std::list<std::reference_wrapper<Object>> container;

  Object a;
  a.n = 12;
  container.push_back(a);  // or std::ref(a)

  // now container = { 12 };

  a.n = 13;
  for (auto i : container) {
      cout << i;
  }
  // now container = { 13 };
  return (0);
}
